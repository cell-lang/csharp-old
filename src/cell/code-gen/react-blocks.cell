implicit {
  debug_mode                      : Bool,
  sorted_cls_defs                 : ClsDef*,
  int_seqs_types_and_lengths      : (String, Nat)*,
  cached_semi_consts_by_impl_arg  : [ImplArg -> [+FnId]];


  String* native_react_block_decl(ReactBlock block) {
    has_time_rules = block.time_rules_count != 0;

    class_name = native_name(block.name);

    memb_vars_decl = (memb_var_decl(v) : v <- isort(block.memb_vars));
    auto_vars_decl = (native_name(t) & " " & native_var_decl_name(v) & ";" : v, t <- isort(block.nested_auto_vars));
    db_vars_decl = ("public " & native_name(t) & " " & native_var_decl_name(v) & ";" : v, t <- isort(block.nested_static_blocks));
    aux_db_vars_decls = ("public " & aux_struct_c_name(t) & " " & aux_struct_var_decl_name(v) & ";" : v, t <- isort(block.nested_static_blocks));

    vars_decls = memb_vars_decl & auto_vars_decl & db_vars_decl & aux_db_vars_decls;

    if block.time_rules_count != 0:
      size_str = printed(block.time_rules_count);
      vars_decls = vars_decls & (
        "public long[] trigger_times_heap = new long[" & size_str & "];",
        "public int[] time_varying_cond_ids_heap = new int[" & size_str & "];"
      );
    ;
    vars_decls = (vars_decls | "") if vars_decls != ();

    all_loc_vars = vars_to_declare(block.apply_code) & union([vars_to_declare(c) : id, c <- block.nodes_update_code]);
    aux_vars = [v : v <- all_loc_vars, v :: AuxVar] & [curr_time if has_time_rules];
    aux_vars_decls = (var_decl(v) : v <- isort(aux_vars));
    aux_vars_decls = (aux_vars_decls | "") if aux_vars != ();

    // aux_name_str = aux_struct_c_name(block.name);
    // aux_decls = ("struct " & aux_name_str & " {") & indent_lines((var_decl(v) : v <- isort(aux_vars))) & ("};");

    ctor_vars_decl = gen_vars_decls(block.pre_init_code);
    ctor_vars_decl = ctor_vars_decl & ("") if ctor_vars_decl != ();
    ctor_body = ctor_vars_decl & native_code(block.pre_init_code, nothing);

    //## BAD BAD BAD: THIS IS JUST A HACK. IT SHOULD BE DEALT WITH IN THE CODE GENERATION PHASE
    ctor_body = ctor_body & (
      native_method_call("this." & aux_struct_var_decl_name(v), v, updater_creation_proc_name(t), ())
      : v, t <- isort(block.nested_static_blocks)
    );

    ctor_sgn = "public " & class_name & "(Env env) {";
    ctor_code = (ctor_sgn) & indent_lines(ctor_body) & ("}", "");

    // cleanup_body = native_code(block.cleanup_code, nothing);
    // cleanup_proc = ("", "public ~" & class_name & "() {") & indent_lines(cleanup_body) & ("}");
    // class_decl = class_decl & cleanup_proc;

    apply_method_vars_decls = gen_vars_decls(block.apply_code);
    apply_method_vars_decls = (apply_method_vars_decls | "") if apply_method_vars_decls != ();
    apply_method_body = apply_method_vars_decls & native_code(block.apply_code, nothing);
    apply_method_sgn = "public void " & apply_method_name(block.name) & "(Env env) {";
    apply_method_code = (apply_method_sgn) & indent_lines(apply_method_body) & ("}");

    time_arg = if has_time_rules then "long " & native_var_decl_name(curr_time) & ", " else "";
    node_update_methods_code = [{
        sgn = "void " & node_update_method_name(block.name, id) & "(" & time_arg & "Env env) {";
        loc_vars_decls = gen_vars_decls(body);
        loc_vars_decls = (loc_vars_decls | "") if loc_vars_decls != ();
        return ("", sgn) & indent_lines(loc_vars_decls & native_code(body, nothing)) & ("}");
      } : id, body <- block.nodes_update_code
    ];

    queue_update_methods_code = [
      gen_queue_update_method(block.name, id, method.body, method.args)
      : id, method <- block.queue_update_code
    ];

    state_is_def_code = native_state_is_def_code(block.name, block.state_is_def_code);
    copy_state_code = native_copy_state_code(block.name, block.copy_state_code);
    set_state_code = native_set_state_code(block.name, block.set_state_code);

    insert_timer_method_code = gen_insert_timer_method(block.name);
    clear_timer_method_code = gen_clear_timer_method(block.name);

    queue_input_updates = |block.ord_inputs| > 2; ## BAD BAD BAD: THE NUMBER 2 IS REPEATED IN THE CODE GENERATION PHASE
    input_setters_code = (
      gen_input_setter(block.name, id, i, queue_input_updates) : id @ i <- block.ord_inputs
    );

    user_def_methods_code = [gen_user_def_method(block.name, id, m.code) : id, m <- block.methods];

    const_data = [gen_const_data(block.name, c) : c <- block.const_data];

    return join((
      ("class " & class_name & " {"),
      indent_lines(vars_decls),
      indent_lines(aux_vars_decls),
      indent_lines(join((("", c) : c <- isort(const_data)))),
      ("") & indent_lines(ctor_code),
      join((("") & indent_lines(m) : m <- input_setters_code)),
      ("") & indent_lines(apply_method_code),
      join((("") & indent_lines(m) : m <- isort(node_update_methods_code))),
      join((("") & indent_lines(m) : m <- isort(queue_update_methods_code))),
      ("") & indent_lines(state_is_def_code),
      ("") & indent_lines(copy_state_code),
      ("") & indent_lines(set_state_code),
      join((("") & indent_lines(m) : m <- isort(user_def_methods_code))),
      ("") & indent_lines(insert_timer_method_code) if has_time_rules,
      ("") & indent_lines(clear_timer_method_code) if has_time_rules,
      ("}")
    ));
  }


  String* gen_queue_update_method(AutoSymbol block_name, BlockNodeId node_id, Instr* body, IntVar* args) {
    method_name = queue_update_method_name(block_name, node_id);
    args_str = append((native_var_type(v) & " " & native_var_decl_name(v) : v <- args), ", ");
    sgn = "void " & method_name & "(" & args_str & ") {";
    vars_decl_text = gen_vars_decls(body);
    vars_decl_text = (vars_decl_text | "") if vars_decl_text != ();
    body_text = vars_decl_text & native_code(body, nothing);
    return (sgn) & indent_lines(body_text) & ("}");
  }


  String* native_state_is_def_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing);
    sng = "public bool " & state_is_def_proc_name(name) & "()";
    return (sng & " {") & indent_lines(body) & ("}");
  }


  String* native_copy_state_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing);
    sgn = "public Obj " & copy_state_proc_name(name) & "()";
    return (sgn & " {") & indent_lines(body) & ("}");
  }


  String* native_set_state_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing);
    ## WHY DOES THIS RETURN AN OBJ?
    sgn = "public void " & set_state_proc_name(name) & "(Obj a0)";
    return (sgn & " {") & indent_lines(body) & ("}");
  }


  String gen_const_data(AutoSymbol block_name, ConstBlockData const) =
    "long[] " & time_slots_table_name(block_name, const.expr_id) & " = {" &
    append((printed(l) & "LL" : l <- const.lengths), ", ") & "}; // CONSTANT";


  String* gen_user_def_method(AutoSymbol block_name, MethodId name, Instr* body) {
    args_str = append(("Obj " & native_var_decl_name(fn_arg(i)) & ", " : i < name.arity));
    sgn = "public Obj " & user_def_method_name(block_name, name) & "(" & args_str & "Env env)";
    vars_decls = gen_vars_decls(body);
    body_text = vars_decls & ("" if vars_decls != ()) & native_code(body, nothing);
    return (sgn & " {") & indent_lines(body_text) & ("}");
  }


  String* gen_input_setter(AutoSymbol block_name, Atom input_name, Nat node_idx, Bool queue_node) {
    pending_input_var_str = native_var_ref_name(pending_input_var(input_name));
    up_to_date_var = native_var_ref_name(up_to_date_var(std_block_node_id(input_name)));
    return (
      "public void " & input_set_method_name(block_name, input_name) & "(Obj value) {",
      "  if (!" & up_to_date_var & ") {",
      "    " & pending_input_var_str & " = value;",
      "  }",
      "  else {",
      "    " & pending_input_var_str & " = value;",
      "    long idx = this.update_count_0;" if queue_node,
      "    this.nodes_to_update_0[idx] = " & printed(node_idx) & ";" if queue_node,
      "    this.update_count_0 = idx + 1;" if queue_node,
      "    " & up_to_date_var & " = false;",
      "  }",
      "}"
    );
  }


  String* gen_insert_timer_method(AutoSymbol block_name) = (
    "public void " & insert_timer_method_name(block_name) & "(long condIdx, long time) {",
    "  int n = (int) this.time_triggers_count;",
    "  long[] tt = this.trigger_times_heap;",
    "  int[] ids = this.time_varying_cond_ids_heap;",

    "  int i = 0;",
    "  while (i < n && tt[i] < time)",
    "    i++;",

    "  for (int j=n ; j > i ; j--) {",
    "    tt[j] = tt[j-1];",
    "    ids[j] = ids[j-1];",
    "  }",

    "  tt[i] = time;",
    "  ids[i] = (int) condIdx;",

    "  this.time_triggers_count = n + 1;",
    "}"
  );


  String* gen_clear_timer_method(AutoSymbol block_name) = (
    "public void " & clear_timer_method_name(block_name) & "(long condIdx) {",
    "  int n = (int) this.time_triggers_count;",
    "  long[] tt = this.trigger_times_heap;",
    "  int[] ids = this.time_varying_cond_ids_heap;",

    "  int i = 0;",
    "  while (i < n && ids[i] != condIdx)",
    "    i++;",

    "  if (i < n)",
    "    this.time_triggers_count = n - 1;",

    "  for ( ; i < n - 1 ; i++) {",
    "    tt[i] = tt[i+1];",
    "    ids[i] = ids[i+1];",
    "  }",
    "}"
  );
}


String memb_var_decl(MembIntVectVar var) {
  native_type = native_var_type(var);
  name = native_var_decl_name(var);
  return "public " & native_type & " " & name & " = new long[" & printed(var.size) & "];";
}


String memb_var_decl(<SignalVar, MembObjVar, PendingInputVar, MembIntVar, MembBoolVar> var) =
  "public " & native_var_type(var) & " " & native_var_decl_name(var) & ";";
