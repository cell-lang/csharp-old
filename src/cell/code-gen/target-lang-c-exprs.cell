String to_c_expr(InlineObj) =
  object(<+> a?)    = "new SymbObj(" & symb_idx_name(a) & ")",
  object(<*..*> n?) = "new IntObj(" & printed(n) & ")",
  empty_seq         = "SeqObj.Empty()",
  empty_rel         = "EmptyRelObj.Singleton()";


String to_c_expr(StdObjVar var) = to_c_var_ref_name(var);


String to_c_expr(NatObjOp expr) =
  at()                = to_c_expr(expr.seq)    & ".GetItem("     & to_c_expr(expr.idx) & ")",
  lookup()            = to_c_expr(expr.rel)    & ".Lookup("      & to_c_expr(expr.key) & ")",
  lookup_field()      = to_c_expr(expr.record) & ".LookupField(" & symb_idx_name(expr.field) & ")",
  get_tag(e?)         = to_c_expr(e)           & ".GetTag()",
  get_inner_obj(e?)   = to_c_expr(e)           & ".GetInnerObj()",
  obj_neg(e?)         = to_c_expr(e)           & ".Negate()",
  get_curr_obj(v?)    = to_c_var_ref_name(v)   & ".Get()",
  rand_elem(e?)       = to_c_expr(e)           & ".RandElem()",
  bool_obj(e?)        = "new SymbObj(" & to_c_expr(e, true) & " ? " & symb_idx_name(true) & " : " & symb_idx_name(false) & ")",
  int_obj(e?)         = "new IntObj("  & to_c_expr(e) & ")",
  to_symb(e?)         = "Parser.ParseSymb(" & to_c_expr(e) & ")",
  get_curr_arg()      = get_curr_arg_to_c_expr(expr.var, expr.arg);


String unboxed_float(AtomicExpr e) = to_c_expr(e, true) & ".GetFloat()";

String to_c_expr(FloatExpr expr) =
  float_lit()           = to_c_float_literal(expr),
  mk_float()            = "new FloatObj(" & printed(expr.mantissa) & "e" & printed(expr.dec_exp) & ")",
  int_to_float(e?)      = "new FloatObj(" & to_c_expr(e, true) & ".GetInt())",
  neg_float(e?)         = "new FloatObj(-" & unboxed_float(e) & ")",
  add_floats(e1?, e2?)  = "new FloatObj(" & unboxed_float(e1) & " + " & unboxed_float(e2) & ")",
  sub_floats(e1?, e2?)  = "new FloatObj(" & unboxed_float(e1) & " - " & unboxed_float(e2) & ")",
  mult_floats(e1?, e2?) = "new FloatObj(" & unboxed_float(e1) & " * " & unboxed_float(e2) & ")",
  div_floats(e1?, e2?)  = "new FloatObj(" & unboxed_float(e1) & " / " & unboxed_float(e2) & ")",
  exp_floats(e1?, e2?)  = "new FloatObj(Math.Pow(" & unboxed_float(e1) & ", " & unboxed_float(e2) & "))",
  square_root(e?)       = "new FloatObj(Math.Sqrt(" & unboxed_float(e) & "))",
  floor_op(e?)          = undefined,
  ceiling_op(e?)        = undefined;


String to_c_float_literal(FloatLit literal) {
  res = string((nat(ascii_0 + d) : d <- literal.mantissa));
  res = "-" & res if literal.negative;
  res = res & "e" & printed(literal.dec_exp) if literal.dec_exp != 0;
  return "new FloatObj(" & res & ")";
}


String get_curr_arg_to_c_expr(BinRelItVar var, <0..2> arg) {
  assert arg != 2;
  return to_c_var_ref_name(var) & ".Get" & printed(arg+1) & "()";
}


String get_curr_arg_to_c_expr(TernRelItVar var, <0..2> arg) =
  to_c_var_ref_name(var) & ".Get" & printed(arg+1) & "()";


String to_c_expr(BoolExpr expr)       = to_c_expr(expr, false);
String to_c_expr(ObjExpr expr, Bool)  = to_c_expr(expr);


String to_c_expr(BoolExpr expr, Bool parentesised) {
  return to_c_var_ref_name(expr) if expr :: BoolVar;
  return match (expr)
    true                  = "true",
    false                 = "false",

    is_symb(e?)           = to_c_expr(e) & ".IsSymb()",
    is_int(e?)            = to_c_expr(e) & ".IsInt()",
    is_float(e?)          = to_c_expr(e) & ".IsFloat()",
    is_ne_seq(e?)         = to_c_expr(e) & ".IsNeSeq()",
    is_ne_set(e?)         = to_c_expr(e) & ".IsNeSet()",
    is_ne_map(e?)         = to_c_expr(e) & ".IsNeMap()",
    is_ne_bin_rel(e?)     = to_c_expr(e) & ".IsNeBinRel()",
    is_ne_tern_rel(e?)    = to_c_expr(e) & ".IsNeTernRel()",
    is_tagged_obj(e?)     = to_c_expr(e) & ".IsTagged()",

    neg(is_eq_bool() e?)  = to_nary_op(" != ", (e.expr1, e.expr2), parentesised),
    neg(is_eq_int() e?)   = to_nary_op(" != ", (e.expr1, e.expr2), parentesised),

    is_eq_bool()          = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised),
    is_eq_int()           = to_nary_op(" == ", (expr.expr1, expr.expr2), parentesised),

    is_eq()               = to_c_expr(expr.expr1) & ".IsEq(" & to_c_expr(expr.expr2) & ")",

    // is_gt()               = to_nary_op(" > ",  (expr.expr1, expr.expr2), parentesised),
    // is_ge()               = to_nary_op(" >= ", (expr.expr1, expr.expr2), parentesised),
    is_lt()               = to_nary_op(" < ",  (expr.expr1, expr.expr2), parentesised),
    is_le()               = to_nary_op(" <= ", (expr.expr1, expr.expr2), parentesised),

    inline_is_eq()        = inline_is_eq_to_c_expr(expr.expr, expr.value, parentesised),

    is_flt(e1?, e2?)      = to_float_op(" < ",  e1, e2, parentesised),
    is_fle(e1?, e2?)      = to_float_op(" <= ", e1, e2, parentesised),

    is_out_of_range(v?)   = to_c_var_ref_name(v) & ".Done()",

    is_blank(v?)          = to_c_var_ref_name(v) & ".IsBlankObj()",
    is_null(v?)           = to_c_var_ref_name(v) & ".IsNullObj()",

    has_elem()            = to_c_expr(expr.set) & ".HasElem(" & to_c_expr(expr.elt) & ")",
    has_field()           = to_c_expr(expr.record) & ".HasField(" & symb_idx_name(expr.field) & ")",

    contains()            = contains_to_c_expr(expr.coll, expr.entry),
    table_contains()      = table_contains_to_c_expr(expr.table, expr.tuple),

    is_member()           = to_c_fn_name(expr.pred) & "(" & to_c_expr(expr.obj) & ")",
    state_is_def()        = state_is_def_proc_name(expr.type) & "(&" & to_c_var_ref_name(expr.auto_var) & ")",

    neg(e?)               = parentesize("!" & to_c_expr(e, true), parentesised),

    and(es?)              = to_nary_op(" & ",  es, parentesised),
    or(es?)               = to_nary_op(" | ",  es, parentesised),
    and_then(es?)         = to_nary_op(" && ", es, parentesised),
    or_else(es?)          = to_nary_op(" || ", es, parentesised);
}


String contains_to_c_expr(ObjExpr rel, ObjExpr+ tuple) {
  fn_name = fn_names_by_arity[|tuple|];
  return to_c_expr(rel) & "." & fn_name & "(" & append((to_c_expr(a) : a <- tuple), ", ") & ")";

  [NzNat -> String] fn_names_by_arity = [
    1 -> "HasElem",
    2 -> "HasPair",
    3 -> "HasTriple"
  ];
}


String table_contains_to_c_expr(AnyRelVar table, IntVar+ tuple) {
  fail;
  // fn_name = fn_names_by_arity[|tuple|];
  // return fn_name & "(&" & append((to_c_var_ref_name(v) : v <- (table) & tuple), ", ") & ")";

  // [NzNat -> String] fn_names_by_arity = [
  //   1 -> "unary_table_contains",
  //   2 -> "binary_table_contains",
  //   3 -> "ternary_table_contains"
  // ];
}


String inline_is_eq_to_c_expr(ObjExpr expr, InlineObj value, Bool parentesised) {
  expr_str = to_c_expr(expr, false);
  return match (value)
    object(<+> a?)    = expr_str & ".IsSymb(" & symb_idx_name(a) & ")",
    object(<*..*> n?) = expr_str & ".IsInt(" & printed(n) & ")",
    empty_seq         = expr_str & ".IsEmptySeq()",
    empty_rel         = expr_str & ".IsEmptyRel()";
}


String to_c_expr(IntExpr expr) = to_c_expr(expr, false);


String to_c_expr(Int expr, Bool parentesised) = printed(expr);

String to_c_expr(IntConst expr, Bool parentesised) =
  to_c_time_slots_table_name(expr.automaton, expr.expr_id) & "[" & to_c_expr(expr.time_slot) & "]";

String to_c_expr(IntVar expr, Bool parentesised) = to_c_var_ref_name(expr);

String to_c_expr(NatIntOp expr, Bool parentesised) =
  get_int_val(e?)       = to_c_expr(e) & ".GetInt()",
  get_size(e?)          = to_c_expr(e) & ".GetSize()",
  minus(e?)             = "-" & to_c_expr(e, true),
  add()                 = to_nary_op(" + ", (expr.val1, expr.val2), parentesised),
  sub()                 = to_nary_op(" - ", (expr.val1, expr.val2), parentesised),
  mult()                = to_nary_op(" * ", (expr.val1, expr.val2), parentesised),
  div()                 = to_nary_op(" / ", (expr.val1, expr.val2), parentesised),
  mod()                 = to_nary_op(" % ", (expr.val1, expr.val2), parentesised),
  bitwise_and(e1?, e2?) = to_nary_op(" & ", (e1, e2), parentesised),
  bitwise_or(e1?, e2?)  = to_nary_op(" | ", (e1, e2), parentesised),
  bitwise_xor(e1?, e2?) = to_nary_op(" ^ ", (e1, e2), parentesised),
  float_bits(e?)        = to_c_expr(e) & ".FloatBits()",
  mantissa(e?)          = to_c_expr(e) & ".Mantissa()",
  dec_exp(e?)           = to_c_expr(e) & ".DecExp()",
  rand_nat(e?)          = "Miscellanea.RandNat(" & to_c_expr(e) & ")",
  // lookup_value()        = "lookup_value(" & to_c_expr(expr.store) & ", " & to_c_expr(expr.value) & ")",
  // lookup_value_ex()     = "lookup_value_ex(" & to_c_expr(expr.store) & ", " &
  //                           aux_struct_var_ref_name(expr.store) & ", " & to_c_expr(expr.value) & ")",
  // get_tuple_field()     = get_tuple_field_to_c_expr(expr.iter, expr.field),
  unique_nat            = "Miscellanea.UniqueNat()",
  ticks                 = "Miscellanea.GetTickCount()";


String get_tuple_field_to_c_expr(TableItVar var, Nat field) {
  fail;
  // fn_name = fn_names_by_arity_and_field[(var.arity, field)];
  // return fn_name & "(&" & to_c_var_ref_name(var) & ")";

  // [(NzNat, Nat) -> String] fn_names_by_arity_and_field = [
  //   (1, 0) -> "unary_table_iter_get_field",
  //   (2, 0) -> "binary_table_iter_get_left_field",
  //   (2, 1) -> "binary_table_iter_get_right_field",
  //   (3, 0) -> "ternary_table_iter_get_left_field",
  //   (3, 1) -> "ternary_table_iter_get_middle_field",
  //   (3, 2) -> "ternary_table_iter_get_right_field"
  // ];
}


String to_c_expr(<ElemVar, VecVar, ItVar, StreamVar, AnyClsVar, AnyRelVar, AnyValueStoreId> var) = to_c_var_ref_name(var);

String to_c_expr(<blank_obj>) = "BlankObj.Singleton()";
String to_c_expr(<null_obj>) = "NullObj.Singleton()";

// String to_c_expr(ClsVar v) = to_c_var_ref_name(v);

String to_nary_op(String op, AnyTypeExpr+ exprs, Bool parentesised) {
  expr = append((to_c_expr(e, true) : e <- exprs), op);
  expr = "(" & expr & ")" if |exprs| > 1 and parentesised;
  return expr;
}

String to_float_op(String op, ObjExpr expr1, ObjExpr expr2, Bool parentesised) {
  expr = to_c_expr(expr1, false) & ".GetFloat() " & op & to_c_expr(expr2, false) & ".GetFloat()";
  expr = "(" & expr & ")" if parentesised;
  return expr;
}