implicit block : ReactBlock {
  String auto_class_name = upper_camel_case(bare_id(block.name));
  String auto_struct_ptr = "((" & to_c_name(block.name) & " *) ptr)";
}


implicit block : ReactBlock, typedefs : [TypeName -> NeType] {
  (String*, String*) input_setter(Atom id) {
    type = block.inputs[id].type;
    inter_type = input_interface_type(type);
    return ((), ()) if inter_type == :generic;
    input_type = input_arg_type(inter_type);

    name = sentence_case(id);
    uc_name = uppercase(id);

    code = (
      "",
      "void Set_" & name & "(" & input_type & " value" & ") {"
    ) & indent_lines(import_code(inter_type, "value", "Obj obj = ")) & (
      "  InternalSetInput(Input." & uc_name & ", obj);",
      "}"
    );

    docs = "  void Set_" & name & "(" & input_type & ");";

    return (code, (docs));
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  (String*, String*) output_getter(Atom id) {
    output = block.outputs[id];
    type = output.type;
    inter_type = output_interface_type(type);
    ret_type = return_value_type(inter_type);

    base_name = sentence_case(id);
    var_name = to_c_var_decl_name(signal_var(id));

    code = (
      "",
      "public " & ret_type & " Get_" & base_name & "() {",
      "  Obj obj = automaton." & var_name & ";",
      "  if (obj.IsNullObj())",
      "    throw new Exception(\"Output is undefined\");",
      "  if (obj.IsBlankObj())" if output.discrete,
      "    throw new Exception(\"Discrete output is not set\");" if output.discrete
    ) & export_code(inter_type, "obj", "  return ") & (
      "}"
    );

    docs = "  " & ret_type & " Get_" & base_name & "();";

    return (code, (docs));
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  (String*, String*) auto_method_wrapper(MethodId method_id, CompiledMethod method) {
    return ((), ()) if method_id.id?;
    base_name = sentence_case(bare_id(method_id.symbol));
    return method_wrapper(method_id, method, block.name, base_name, auto_class_name, "automaton.");
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  (String*, String*) react_auto_wrapper {
    ord_inputs = block.ord_inputs;
    ord_outputs = (o : o <- block.ord_outputs, not block.inputs(o, *));

    inputs = (uppercase(i) : i <- ord_inputs);
    outputs = (uppercase(o) : o <- ord_outputs, not block.inputs(o, *));

    is_time_sensitive = block.memb_vars(elapsed_time); ## BAD BAD: NOT A RELIABLE WAY TO DO IT...
    apply_ret_type = if is_time_sensitive then "bool" else "void";

    auto_name = to_c_name(block.name);

    pre_init_method_name = pre_init_method_name(block.name);
    cleanup_method_name = cleanup_method_name(block.name);
    apply_method_name = apply_method_name(block.name);

    input_set_methods_names = (input_set_method_name(block.name, i) : i <- ord_inputs);
    output_vars_names = (to_c_var_decl_name(signal_var(o)) : o <- ord_outputs);

    input_memb_test_pred_name = (to_c_fn_name(block.input_memb_preds[i]) : i <- ord_inputs);

    elapsed_time_var_name = to_c_var_decl_name(elapsed_time);
    changed_outputs_count_var_name = to_c_var_decl_name(changed_outputs_count);

    input_setters, input_setters_docs = (join(ls) : ls <- unzip((input_setter(i) : i <- ord_inputs)));
    output_getters, output_getters_docs = (join(ls) : ls <- unzip((output_getter(o) : o <- ord_outputs)));

    methods_wrappers, methods_wrappers_docs = (
      join(ls) : ls <- unzip(isort([auto_method_wrapper(id, m) : id, m <- block.methods]))
    );

    input_enum_docs = if inputs == ()
        then ()
      elif sum((length(i) : i <- inputs)) <= 80
        then ("enum Input {" & append(inputs, ", ") & "};")
      else
        ("enum Input {") & ("    " & i & "," : i <- inputs) & ("  };");

    output_enum_docs = if outputs == ()
        then ()
      elif sum((length(o) : o <- inputs)) <= 80
        then ("enum Output {" & append(outputs, ", ") & "};")
      else
        ("enum Output {") & ("    " & o & "," : o <- outputs) & ("  };");

    enum_empty_line = ("" if input_enum_docs != () and output_enum_docs != ());
    enums_docs = input_enum_docs & enum_empty_line & output_enum_docs;
    enums_decls = ("public " & l : l <- input_enum_docs) & enum_empty_line & ("public " & l : l <- output_enum_docs);

    docs = (
      "class CellLang.Generated." & auto_class_name & " {"
    ) & indent_lines(enums_docs) & (
      "",
      "  " & auto_class_name & "();",
      "",
      "  void SetInput(Input input, string value);" if inputs != (),
      "  Value ReadOutput(Output output);" if outputs != (),
      "" if is_time_sensitive,
      "  void SetElapsedMillisecs(uint);" if is_time_sensitive,
      "  void SetElapsedSecs(uint);" if is_time_sensitive,
      "",
      "  " & apply_ret_type & " Apply();",
      "  Value ReadState();",
      "  void SetState(string);",
      "",
      "  Output[] ChangedOutputs(int);" if outputs != ()
    );

    docs = docs & ("") & input_setters_docs if input_setters_docs != ();
    docs = docs & ("") & output_getters_docs if output_getters_docs != ();
    docs = docs & ("") & methods_wrappers_docs if methods_wrappers_docs != ();

    docs = docs & (
      "};"
    );

    code = enums_decls & (
      "" if enums_decls != (),
      "Env env;",
      auto_name & " automaton;",
      "",
      "public " & auto_class_name & "() {",
      "  env = new Env();",
      "  automaton = new " & auto_name & "(env);", ## WHY IS env NEEDED HERE? AND WHAT HAPPENS IF AN EXCEPTION IS THROWN?
      "}",
      "",
      "public " & apply_ret_type & " Apply() {",
      "  automaton.Apply(env);",
      "  return automaton.elapsed_time == 0;" if is_time_sensitive,
      "}",
      "",
      "public Value ReadState() {",
      "  return Conversions.ExportAsValue(automaton.CopyState());",
      "}",
      "",
      "public void SetState(string str) {",
      "  if (automaton.is_new)",
      "    throw new Exception(\"Cannot set state: automaton instance is not new\");",
      "  Obj obj = Conversions.ConvertText(str);",
      "  if (!is_type_0(obj))",
      "    throw new Exception(\"Invalid state\");",
      "  automaton.SetState(obj);",
      "}"
    );

    if is_time_sensitive:
      code = code & (
        "",
        "public void SetElapsedMillisecs(int time) {",
        "  if (automaton.is_new | automaton.elapsed_time > 0)",
        "    throw new Exception(\"Cannot set elapsed time now\");",
        "  automaton.elapsed_time = 1000000L * (uint) time;",
        "}",
        "",
        "public void SetElapsedSecs(int time) {",
        "  SetElapsedMillisecs(1000 * time);",
        "}"
      );
    ;

    if inputs != ():
      code = code & (
        "",
        "void InternalSetInput(Input input, Obj obj) {",
        "  switch (input) {"
      );
      for input @ j <- inputs:
        code = code & (
          "" if j > 0,
          "    case Input." & input & ":",
          "      if (" & input_memb_test_pred_name(j) & "(obj)) {",
          "        automaton." & input_set_methods_names(j) & "(obj);",
          "        return;",
          "      }",
          "      break;"
        );
      ;
      code = (code |
        "  }",
        "  Environment.Exit(1); // Internal error",
        "}",
        "",
        "public void SetInput(Input input, string value) {",
        "  InternalSetInput(input, Conversions.ConvertText(value));",
        "}"
      );
    ;

    if outputs != ():
      code = code & (
        "",
        "public Output[] ChangedOutputs() {",
        "  int count = (int) automaton.changed_outputs_count;",
        "  Output[] outputs = new Output[count];",
        "  for (int i=0 ; i < count ; i++)",
        "    outputs[i] = (Output) automaton.changed_outputs[i];",
        "  return outputs;",
        "}",
        "",
        "public Value ReadOutput(Output output) {",
        "  Obj obj = null;",
        "  switch (output) {"
      );
      for output @ i <- outputs:
        code = code & (
          "" if i > 0,
          "    case Output." & output & ":",
          "      obj = automaton." & output_vars_names(i) & ";",
          "      break;"
        );
      ;
      code = code & (
        "  }",
        "  return Conversions.ExportAsValue(obj);",
        "}"
      );
    ;

    code = code & input_setters & output_getters & methods_wrappers;
    code = ("public class " & auto_class_name & " {") & indent_lines(code) & ("}");

    return (code, docs);
  }
}

////////////////////////////////////////////////////////////////////////////////
/////////////// Code shared between static and reactive automata ///////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  (String*, String*) method_wrapper(MethodId method_id, CompiledMethod method,
    <AutoSymbol, DBSymbol> block_name, String ext_name, String class_name, String method_path) {
    args_inter_types = (input_interface_type(t) : t <- method.args_types);
    inter_ret_type = output_interface_type(method.ret_type);
    args_types_str = append((input_arg_type(it) : it <- args_inter_types), ", ");
    ret_val_str = return_value_type(inter_ret_type);
    args_decls = append((input_arg_type(it) & " arg" & printed(i) : it @ i <- args_inter_types), ", ");

    arity = |method.args_types|;
    memb_preds = method.args_memb_preds;
    args_types_by_pos = ([ps(i) : ps <- memb_preds] : i < arity);
    mono_args = ((i, only(ts)) : ts @ i <- args_types_by_pos, |ts| == 1);
    poly_args = isort([i : ts @ i <~ args_types_by_pos, |ts| != 1]);

    code = (
      "",
      "public " & ret_val_str & " " & ext_name & "(" & args_decls & ") {"
    );

    code = code & join((
      indent_lines(import_code(it, "arg" & printed(i), "Obj objArg" & printed(i) & " = "))
      : it @ i <- args_inter_types
    ));

    conds = (to_c_fn_name(p) & "(objArg" & printed(i) & ")" : i, p <- mono_args);
    if poly_args != ():
      poly_conds = ((to_c_fn_name(ps(i)) & "(objArg" & printed(i) & ")" : i <- poly_args) : ps <- isort(memb_preds));
      anded_conds = ({
          c = append(cs, " && ");
          c = "(" & c & ")" if |cs| > 1;
          return c;
        } : cs <- poly_conds
      );
      poly_cond = append(anded_conds, " || ");
      poly_cond = "(" & poly_cond & ")" if |anded_conds| > 1;
      conds = (conds | poly_cond);
    ;
    cond = append(conds, " && ");
    cond = "(" & cond & ")" if |conds| > 1;

    code = code & (
      "  if (!" & cond & ")",
      "    throw new Exception(\"Invalid argument type\");"
    ) if cond != "";

    code = code & (
      "  try {",
      "    Obj resObj = " & method_path & user_def_method_name(block_name, method_id) &
        "(" & append((("objArg" & printed(i) : i < arity) | "env"), ", ") & ");"
      ) & indent_lines(indent_lines(export_code(inter_ret_type, "resObj", "return "))) & (
      "  }",
      "  catch {",
      "    env = new Env();",
      "    throw;",
      "  }",
      "}"
    );

    docs = ret_val_str & " " & ext_name & "(" & args_types_str & ");";

    return (code, (docs));
  }
}
