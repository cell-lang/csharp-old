//  A     Atom integer representation
//  B     AnyRelVar
//  C     ClsVar
//  D
//  E     Cached no-positional-argument function value
//  F     Function
//  G
//  H
//  I
//  J
//  K     null_locks_count_var()
//  L
//  M     MembVar                                                     MethodId
//  N     Reactive automaton named nodes
//  O
//  P                                                                             ProcSymbol
//  Q
//  R     AnyAutoVar                                                              AutoSymbol
//  S     SignalVar
//  T     AnyDBVar                                                                DBSymbol
//  U     up_to_date_var()                                            UpdateId
//  V     StdVar, env. + ImplArg, internal var + description
//  W
//  X     update_source_var()
//  Y
//  Z

////////////////////////////////////////////////////////////////////////////////

String symb_idx_name(Atom symb) = _str_(symb) & "_A";

String symb_idx_name(SymbObj symb) =
  object(a?)  = symb_idx_name(a);

////////////////////////////////////////////////////////////////////////////////

String native_var_decl_name(<ObjVar, PendingInputVar, BoolVar, IntVar, AnyAutoVar, AnyDBVar, AnyRelVar, AnyValueStoreId> v) = native_var_name(v, false);
String native_var_ref_name(<ObjVar, PendingInputVar, BoolVar, IntVar, AnyAutoVar, AnyDBVar, AnyRelVar, AnyValueStoreId> v)  = native_var_name(v, true);

String native_var_decl_name(<VecVar, ItVar, StreamVar, AnyClsVar> v) = native_var_name(v);
String native_var_ref_name(<VecVar, ItVar, StreamVar, AnyClsVar> v)  = native_var_name(v);

/////////////////////////////////////////////////////////////////////////////////////

String native_var_decl_name(MembIntVectVar v) =
  nodes_to_update_vect_var()  = "nodes_to_update_" & printed(v.level),
  changed_outputs()           = "changed_outputs";

/////////////////////////////////////////////////////////////////////////////////////

String native_var_name(VecVar v)          = "vec_" & printed(v.id);
String native_var_name(SeqItVar v)        = "seq_it_" & printed(bare_id_2(v));
String native_var_name(SetItVar v)        = "set_it_" & printed(bare_id_2(v));
String native_var_name(BinRelItVar v)     = "bin_rel_it_" & printed(bare_id_2(v));
String native_var_name(TernRelItVar v)    = "tern_rel_it" & printed(bare_id_2(v));
String native_var_name(StreamVar v)       = "stream_" & printed(bare_id_2(v));

String native_var_name(TableItVar v) {
  prefix = match (v.arity)
    1   = "unary",
    2   = "bin",
    3   = "tern";

  return prefix & "_table_it_" & printed(v.id);
}

String native_var_name(AnyClsVar v) =
  cls_var(<+> a?)     = _str_(a) & "_C",
  cls_var(<*..*> n?)  = "cls_" & printed(n),
  capt_cls_var(n?)    = "captured_cls[" & printed(n) & "]";

/////////////////////////////////////////////////////////////////////////////////////

String native_var_name(<ObjVar, PendingInputVar> var, Bool add_prefix) {
  assert match (var)
    qual_signal_var() |
    qual_memb_var()   = add_prefix,
    _                 = true;

  prefix = if add_prefix
    then match (var)
      impl_arg()          = "env.",
      prev_var_value()    = "this.",
      pending_state_var() = "updater.",
      _                   = "this."
    else "";

  return match (var)
    var(<+> a?)                   = _str_(a) & "_V",
    fn_arg(<*..*> n?)             = "a" & printed(n),
    impl_arg(<+> a?)              = prefix & _str_(a) & "_V",
    capt_var(<*..*> n?)           = "captured_vars["  & printed(n) & "]",
    memb_var(<+> a?)              = prefix & _str_(a) & "_M",
    signal_var(a?)                = prefix & _str_(a) & "_S",
    qual_signal_var()             = native_var_name(var.auto_var, true) & "." & native_var_name(var.memb_var, false),
    qual_memb_var()               = native_var_name(var.db_var, true) & "." & native_var_name(var.memb_var, false),
    watched_signal_value_var(a?)  = prefix & _str_(a) & "_Sw",
    prev_var_value(v?)            = prefix & ad_hoc_var_name(v) & "d",
    pending_state_var(a?)         = prefix & _str_(a) & "_Mp",
    lvar(<*..*> n?)               = "l" & printed(n),
    evar()                        = "vec_" & printed(var.id) & "[" & native_idx_expr(var.idx) & "]",
    pending_input_var(<+> a?)     = prefix & _str_(a) & "_Sp";


  String ad_hoc_var_name(SignalVar var)     = native_var_decl_name(var);
  String ad_hoc_var_name(QualSignalVar var) = ad_hoc_var_name(var.auto_var) & "_" & ad_hoc_var_name(var.memb_var);
  String ad_hoc_var_name(NestedAutoVar var) = native_var_name(var, false);
  String ad_hoc_var_name(LocAutoVar)        = undefined;
}


String native_var_name(BoolVar var, Bool add_prefix) {
  prefix = if add_prefix
    then match (var)
      nested_db_spent() = "updater.",
      _                 = "this."
    else "";

  return match (var)
    bvar(n?)                                      = "b" & printed(n),
    nested_db_spent(v?)                           = prefix & native_var_decl_name(v) & "s",
    cond_value_var(n?)                            = prefix & "cond_" & printed(n),
    cond_is_def_var(n?)                           = prefix & "cond_def_" & printed(n),
    watched_signal_up_to_date_var(a?)             = prefix & _str_(a) & "_Uw",
    up_to_date_var(std_block_node_id(a?))         = prefix & _str_(a) & "_U",
    up_to_date_var(cond_node_id(n?))              = prefix & "cond_up_to_date_" & printed(n),
    up_to_date_var(nested_auto_node_id(a?))       = prefix & _str_(a) & "_Ua",
    up_to_date_var(nested_auto_input_id() id?)    = prefix & _str_(id.auto) & "_Ua_" & _str_(id.input),
    is_new                                        = prefix & "is_new",
    qual_bool_var() = native_var_name(var.auto_var, add_prefix) & "." & native_var_name(var.memb_var, false);
}


String native_var_name(IntVar v, Bool add_prefix) {
  assert match (v)
    changed_output()  |
    elapsed_time()    = add_prefix,
    _                 = true;

  prefix = if add_prefix then "this." else "";
  return match (v)
    ivar(n?)                            = "i" & printed(n),
    curr_time                           = "curr_time",
    update_time                         = "update_time",
    update_expr_index                   = "update_expr_index",
    update_source_var(a?)               = prefix & _str_(a) & "_V_update_source",
    null_locks_count_var(a?)            = prefix & _str_(a) & "_V_null_locks_count",
    update_count_var(l?)                = prefix & "update_count_" & printed(l),
    nodes_to_update_var()               = prefix & "nodes_to_update_" & printed(v.level) & "[" & native_idx_expr(v.index) & "]",
    next_trigger_time_var(a?)           = prefix & _str_(a) & "_V_next_trigger_time",
    curr_time_slot_var(a?)              = prefix & _str_(a) & "_V_curr_time_slot",
    time_triggers_count_var             = prefix & "time_triggers_count",
    trigger_times_heap_var(i?)          = prefix & "trigger_times_heap[" & printed(i) & "]",
    time_varying_cond_ids_heap_var(i?)  = prefix & "time_varying_cond_ids_heap[" & printed(i) & "]",
    last_update_time                    = prefix & "last_update_time",
    elapsed_time                        = prefix & "elapsed_time",
    changed_outputs_count               = prefix & "changed_outputs_count",
    changed_output()                    = prefix & "changed_outputs[" & native_idx_expr(v.index) & "]",
    elapsed_time(av?)                   = native_var_name(av, false) & ".elapsed_time",
    nested_auto_int_var()               = native_var_name(v.auto_var, true) & "." & native_var_name(v.memb_var, false);
}


String native_var_name(AnyAutoVar v, Bool add_prefix) =
  loc_auto_var(a?)    = _str_(a) & "_R",
  nested_auto_var(a?) = #(if add_prefix then "this." else "") & _str_(a) & "_R";


String native_var_name(AnyDBVar v, Bool add_prefix) =
  loc_db_var(a?)    = _str_(a) & "_T",
  nested_db_var(a?) = #(if add_prefix then "this." else "") & _str_(a) & "_T",
  linked_db_var(n?) = "(*" & #(if add_prefix then "this." else "") & "linked_auto_" & printed(n) & ")",
  qual_db_var()     = native_var_name(v.outer, add_prefix) & "." & native_var_name(v.inner, false);


String native_var_name(AnyRelVar v, Bool add_prefix) =
  rel_var(a?)     = #(if add_prefix then "this." else "") & _str_(a) & "_B",
  qual_rel_var()  = native_var_name(v.db_var, add_prefix) & "." & native_var_name(v.rel_var, false);


String native_var_name(AnyValueStoreId v, Bool add_prefix) =
  value_store_id(n?)      = #(if add_prefix then "this." else "") & "value_store_" & printed(n),
  nested_value_store_id() = { assert add_prefix;
                              db_var_str = native_var_name(v.db_var, true);
                              return db_var_str & "." & native_var_name(v.store_id, false);
                            };

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

String native_idx_expr(Nat n)                             = printed(n);
String native_idx_expr(IntVar v)                          = native_var_ref_name(v);
String native_idx_expr(<add(val1: IntVar, val2: Nat)> e)  = native_var_ref_name(e.val1) & " + " & printed(e.val2);

////////////////////////////////////////////////////////////////////////////////

String pending_updates_var_decl_name(RelVar rel_var) =
  rel_var(a?) = _str_(a) & "_Bp";

String pending_updates_var_ref_name(RelVar rel_var) = "updater." & pending_updates_var_decl_name(rel_var);

String aux_struct_var_decl_name(<LocDBVar, NestedDBVar> db_var) = native_var_decl_name(db_var) & "x";

String aux_struct_var_ref_name(LocDBVar db_var) = aux_struct_var_decl_name(db_var);

String aux_struct_var_ref_name(NestedDBVar db_var) = "updater." & aux_struct_var_decl_name(db_var);

String aux_struct_var_decl_name(ValueStoreId vs) =
  value_store_id(n?)  = "value_store_aux_" & printed(n);

String aux_struct_var_ref_name(ValueStoreId vs) = "updater." & aux_struct_var_decl_name(vs);

////////////////////////////////////////////////////////////////////////////////

String var_decl(ObjVar v)       = "Obj "          & native_var_decl_name(v) & " = null;"; ## CHANGE THIS
String var_decl(BoolVar v)      = "bool "         & native_var_decl_name(v) & ";";
String var_decl(IntVar v)       = "long "         & native_var_decl_name(v) & ";";
String var_decl(SeqItVar v)     = "SeqOrSetIter " & native_var_decl_name(v) & ";";
String var_decl(SetItVar v)     = "SeqOrSetIter " & native_var_decl_name(v) & ";";
String var_decl(BinRelItVar v)  = "BinRelIter "   & native_var_decl_name(v) & ";";
String var_decl(TernRelItVar v) = "TernRelIter "  & native_var_decl_name(v) & ";";
String var_decl(StreamVar v)    = "List<Obj> "    & native_var_decl_name(v) & ";";
String var_decl(VecVar v)       = "Obj[] " & native_var_decl_name(v) & " = new Obj[" & printed(v.size) & "];";
String var_decl(TableItVar v)   = table_it_var_type[v.arity] & " " & native_var_decl_name(v) & ";";


[NzNat -> String] table_it_var_type = [
  1 -> "UnaryTable.Iter",
  2 -> "BinaryTable.Iter",
  3 -> "TernaryTable.Iter"
];


String pending_updates_var_type(Table table) {
  return names_by_arity[arity(table)];

  [NzNat -> String] names_by_arity = [
    1 -> "UnaryTableUpdater",
    2 -> "BinaryTableUpdater",
    3 -> "TernaryTableUpdater"
  ];
}

////////////////////////////////////////////////////////////////////////////////

String memo_var_name(<ProcSymbol, MembTestPredId>) = undefined;

String memo_var_name(FnId id) =
  fn_family_id()  = native_fn_symb_name(id.symbol) & "_E",
  unique_fn_id()  = memo_var_name(id.family) & printed(id.id),
  nested_fn_id()  = native_fn_name(id.outer) & "_" & memo_var_name(id.inner);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String time_slots_table_name(AutoSymbol auto_name, Atom table_id) =
  native_name(auto_name) & "_" & _str_(table_id) & "_Bt";


String native_var_type(ObjVar)           = "Obj";
String native_var_type(IntVar)           = "long";
String native_var_type(MembIntVectVar)   = "long[]";
String native_var_type(BoolVar)          = "bool";


String native_table_type(Table table) {
  return names_by_arity[arity(table)];

  [NzNat -> String] names_by_arity = [
    1 -> "UnaryTable",
    2 -> "BinaryTable",
    3 -> "TernaryTable"
  ];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String native_const(<blank, undefined> state) =
  #(if state == :blank then "BlankObj" else "NullObj") & ".Singleton()";

////////////////////////////////////////////////////////////////////////////////

String native_name(AutoSymbol) = auto_symbol(a?) = upper_camel_case(a) & "_R";

String native_name(DBSymbol) = db_symbol(a?) = upper_camel_case(a) & "_T";

String aux_struct_c_name(<AutoSymbol, DBSymbol> symb) = native_name(symb) & "x";

String native_name(MethodId meth_id) {
  id_str = if meth_id.id? then uppercase_encoding(meth_id.id) else "";
  return _str_(bare_id(meth_id.symbol)) & "_M" & printed(meth_id.arity) & id_str;
}

String native_name(UpdateId id) =
  main_handler    = "msg_handler",
  handler_id(n?)  = "msg_handler_" & uppercase_encoding(n),
  update_id()     = { id_str = if id.id? then uppercase_encoding(id.id) else "";
                      return _str_(bare_id(id.symbol)) & "_U" & printed(id.arity) & id_str;
                    };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THE PARAMETER SHOULD BE REMOVED...

String copy_state_proc_name         (DBSymbol db_type) = "CopyState";
String set_state_proc_name          (DBSymbol db_type) = "SetState";
String set_state_entry_point_name   (DBSymbol db_type) = "SetStateEntryPoint";
String updater_creation_proc_name   (DBSymbol db_type) = "NewUpdater";
String updater_reset_proc_name      (DBSymbol db_type) = "ResetUpdater";
String updates_copy_proc_name       (DBSymbol db_type) = "Copy";
String updates_apply_proc_name      (DBSymbol db_type) = "Apply";
String updates_finish_proc_name     (DBSymbol db_type) = "Finish";
String updates_check_proc_name      (DBSymbol db_type) = "Check";
String update_entry_point_name      (DBSymbol db_type) = "UpdateEntryPoint";
String init_method_name             (DBSymbol db_type) = "Init";
String cleanup_method_name          (DBSymbol db_type) = "Cleanup";

String state_is_def_proc_name(AutoSymbol auto_type) = "StateIsDef";

String set_state_proc_name(AutoSymbol auto_type) = "SetState";

String copy_state_proc_name     (AutoSymbol auto_type) = "CopyState";
String pre_init_method_name     (AutoSymbol auto_type) = "Preinit";
String apply_method_name        (AutoSymbol auto_type) = "Apply";
String cleanup_method_name      (AutoSymbol auto_type) = "Cleanup";
String insert_timer_method_name (AutoSymbol auto_type) = "InsertTimer";
String clear_timer_method_name  (AutoSymbol auto_type) = "ClearTimer";

String update_name(DBSymbol db, UpdateId id) = native_name(id);
String user_def_method_name(<AutoSymbol, DBSymbol> type, MethodId method) = native_name(method);

String input_set_method_name(AutoSymbol auto, Atom input) = _str_(input) & "_S_set";

String node_update_method_name(AutoSymbol auto_type,  BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_update";
String queue_update_method_name(AutoSymbol auto_type, BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_invalidate";

String node_specific_method_name_prefix(BlockNodeId id, AutoSymbol auto) =
  std_block_node_id(a?)   = native_name(auto) & "_" & _str_(a) & "_N",
  cond_node_id(n?)        = native_name(auto) & "_cond_node_" & printed(n),
  nested_auto_node_id(a?) = native_name(auto) & "_" & _str_(a) & "_Na",
  nested_auto_input_id()  = native_name(auto) & "_" & _str_(id.auto) & "_Na_" & _str_(id.input);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String const_int_seq_c_name(Nat seq_id) = "const_int_seq_" & printed(seq_id);

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

String native_fn_name(FnId id) =
  fn_family_id()    = native_fn_symb_name(id.symbol, id.arity),
  unique_fn_id()    = native_fn_name(id.family) & uppercase_encoding(id.id),
  nested_fn_id()    = native_fn_name(id.outer) & "_" & native_fn_name(id.inner);

String native_fn_symb_name(FnSymbol fn_symb, Nat arity) =
  fn_symbol(symb?)    = _str_(symb) & "_F" & printed(arity),
  op_symbol(op?)      = _str_(op);

String native_fn_symb_name(FnSymbol fn_symb) =
  fn_symbol(symb?)    = _str_(symb),
  op_symbol(op?)      = _str_(op);


String native_fn_name(MembTestPredId) =
  memb_test(<+> a?)         = "is" & upper_camel_case(a),
  memb_test(<*..*> n?)      = "is_type_" & printed(n),
  memb_test(a1?, <+> a2?)   = "is" & upper_camel_case(a2) & "_" & upper_camel_case(a1),
  memb_test(a?, <*..*> n?)  = "is" & upper_camel_case(a) & "_" & printed(n);


String native_fn_name(ProcSymbol proc_symb) {
  bare_symb = match (proc_symb) proc_symbol(s?) = s;
  name = upper_camel_case(bare_symb) & "_P";
  name = "Procs." & name if bare_symb :: <file_read, file_write, print, get_char>;
  return name;
}
